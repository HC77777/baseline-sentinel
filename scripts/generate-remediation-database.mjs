import { features } from 'web-features';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const OUTPUT_PATH = path.resolve(__dirname, '../packages/baseline-fixer-core/src/remediation-database.ts');

function generateDatabase() {
  let content = `// This file is auto-generated by scripts/generate-remediation-database.mjs\n// Do not edit this file directly.\nimport { Remediation } from './index';\n\nexport const REMEDIATION_DATABASE: Record<string, Remediation> = {\n`;

  const entries = Object.entries(features);
  const nonBaseline = entries.filter(([, feature]) => feature?.status?.baseline === false);

  for (const [id, feature] of nonBaseline) {
    const compat = feature.compat_features || [];
    const primaryBcdKey = compat.find((k) => k.startsWith('css.properties.')) || compat[0] || `unknown-bcd:${id}`;

    const safeName = (feature?.name || id).replace(/'/g, "\\'");

    content += `\n  '${primaryBcdKey}': {\n    featureId: '${primaryBcdKey}',\n    fixes: [\n      {\n        type: 'TODO' as any,\n        description: 'TODO: Research the best fix for ${safeName} (${primaryBcdKey})',\n        payload: {},\n      },\n    ],\n  },`;
  }

  content += `\n};\n`;

  fs.mkdirSync(path.dirname(OUTPUT_PATH), { recursive: true });
  fs.writeFileSync(OUTPUT_PATH, content, 'utf8');
  console.log(`Successfully generated remediation database with ${nonBaseline.length} features at ${OUTPUT_PATH}`);
}

generateDatabase();
